@page "/participant/{ParticipantId:int}"
@inject HttpClient Http
@inject NavigationManager Navigation
@using RIK_Test.Shared.DTOs;
@using RIK_Test.Shared.Models;
@using System.Net.Http.Json
@using RIK_Test.Client.Components;
@using Microsoft.AspNetCore.WebUtilities;


<CardWithHeader HeaderTitle="Osavõtja muutmine">
    <ParticipantForm ParticipantModel="@participant" OnSubmit="HandleSaveParticipant" OnBack="NavigateBack" />

    @if (!string.IsNullOrEmpty(errorMessage)) {
        <p class="text-danger">@errorMessage</p>
    }
    @if (isSuccess) {
        <p class="text-success">Participant added successfully!</p>
    }
</CardWithHeader>
@code {
    [Parameter]
    public int ParticipantId { get; set; }

    public CreateParticipantDTO participant { get; set; } = new CreateParticipantDTO();
    private bool isSuccess = false;
    private string? errorMessage;
    private string? returnUrl;

    protected override async Task OnInitializedAsync() {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url)) {
            returnUrl = url;
        }
        var response = await Http.GetAsync($"api/participant/{ParticipantId}");

        if (!response.IsSuccessStatusCode) {
            errorMessage = "Tekkis viga osaleja andmete saamisel";
            return;
        }

        participant = await response.Content.ReadFromJsonAsync<CreateParticipantDTO>();
    }

    private async Task HandleSaveParticipant() {
        try {
            var response = await Http.PutAsJsonAsync($"api/participant/{ParticipantId}/", participant);

            if (!response.IsSuccessStatusCode) {
                isSuccess = false;
                errorMessage = "Tekkis viga osaleja andmete muutmisel.";
                return;

            }
            isSuccess = true;
            errorMessage = null;
            participant = await response.Content.ReadFromJsonAsync<CreateParticipantDTO>();
        }
        catch (Exception ex) {
            isSuccess = false;
            errorMessage = $"Exception: {ex.Message}";
        }
    }

    private void NavigateBack() {
        Navigation.NavigateTo(returnUrl ?? "/");
    }
}
