@page "/event/{EventId:int}"
@inject NavigationManager Navigation
@inject HttpClient Http
@using RIK_Test.Shared.DTOs;
@using RIK_Test.Shared.Models;
@using System.Net.Http.Json
@using RIK_Test.Client.Components;

<CardWithHeader HeaderTitle="Osavõtjad">
    @if (isLoading) {
        <p>Loading...</p>
    }
    else if (eventDetails == null) {
        <p class="text-danger">Event not found</p>
    }
    else {
        <p>Ürituse nimi: @eventDetails.Name</p>
        <p>Koht: @eventDetails.Place</p>
        <p>Toimumisaeg: @eventDetails.Date?.ToString("MM/dd/yyyy")</p>

        @if (eventDetails.Participants.Count > 0) {
            <label for="participants">Osavõtjad:</label>
            <ul id="participants">
                @foreach (var participant in eventDetails.Participants) {
                    <li>@participant.NameToString() - @participant.Code <button type="button" class="btn-secondary" @onclick="(() => HandleNavigateToDetails(participant.Id))">VAATA</button>  <button type="button" class="btn-secondary" @onclick="(() => HandleRemoveParticipant(participant.Id))">KUSTUTA</button></li>
                }
            </ul>
        }
        else {
            <p>Sellele üritusele pole veel osavõtjaid.</p>
        }

        <h4>Osavõtja lisamine</h4>
        <ParticipantForm ParticipantModel="@newParticipant" OnSubmit="HandleAddParticipant"/>


        @if (!string.IsNullOrEmpty(errorMessage)) {
            <p class="text-danger">@errorMessage</p>
        }
        @if (isSuccess) {
            <p class="text-success">Participant added successfully!</p>
        }
    }
</CardWithHeader>
@code {
    [Parameter]
    public int EventId { get; set; }

    private EventDTO? eventDetails;
    private CreateParticipantDTO newParticipant = new CreateParticipantDTO {
        Type = Participant.ParticipantType.Private
    };
    private bool isLoading = true;
    private bool isSuccess = false;
    private string? errorMessage;

    protected override async Task OnInitializedAsync() {
        await LoadEventDetails();
    }

    private async Task LoadEventDetails() {
        try {
            eventDetails = await Http.GetFromJsonAsync<EventDTO>($"api/event/{EventId}");
            isLoading = false;
        }
        catch {
            isLoading = false;
            eventDetails = null;
            errorMessage = "Unable to load event details.";
        }
    }

    private async Task HandleAddParticipant() {
        try {
            var response = await Http.PostAsJsonAsync($"api/event/{EventId}/register/", newParticipant);

            if (!response.IsSuccessStatusCode) {
                isSuccess = false;
                errorMessage = "Tekkis viga osaleja registreemisiel";
                return;
            }
            isSuccess = true;
            errorMessage = null;

            eventDetails = await response.Content.ReadFromJsonAsync<EventDTO>();
            newParticipant = new CreateParticipantDTO();
        }
        catch (Exception ex) {
            isSuccess = false;
            errorMessage = $"Exception: {ex.Message}";
        }
    }

    private async Task HandleRemoveParticipant(int participantId) {
        Console.WriteLine("Part id", participantId);
        var response = await Http.PostAsync($"api/event/{EventId}/remove/{participantId}", null);
        if (!response.IsSuccessStatusCode) {
            isSuccess = false;
            errorMessage = "Tekkis viga osavõtja eemaldamisel ürituselt";
            return;
        }

        eventDetails = await response.Content.ReadFromJsonAsync<EventDTO>();
    }

    private void HandleNavigateToDetails(int id) {
        Navigation.NavigateTo($"/participant/{id}");
    }
}
